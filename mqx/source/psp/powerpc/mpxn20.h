/**HEADER********************************************************************
* 
* Copyright (c) 2008 Freescale Semiconductor;
* All Rights Reserved
*
* Copyright (c) 2004-2008 Embedded Access Inc.;
* All Rights Reserved
*
* Copyright (c) 1989-2008 ARC International;
* All Rights Reserved
*
*************************************************************************** 
*
* THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR 
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  
* IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
* THE POSSIBILITY OF SUCH DAMAGE.
*
**************************************************************************
*
* $FileName: mpxn20.h$
* $Version : 3.8.1.0$
* $Date    : Jun-7-2012$
*
* Comments:
*
*   This file contains the type definitions for the Freescale PowerPC 
*   MPC5668 processor.
*
*END***********************************************************************/

#ifndef __mpxn20_h__
#define __mpxn20_h__

/* Indicate processor type */
#define PSP_MPXN20
#define PSP_BOOKE
#define PSP_E200_CORE_Z6

// Specify # MMU TLB entries prior to including e200core.h 
#define E200CORE_MMU_NUM_TLBS       (32) //(16) FIXME: MMU not used on PXN20 this has to be at least 32 for succesfull compilation

#include <e200core.h>
#include <mpxnxx.h>

/*--------------------------------------------------------------------------*/
/*
**                    CONSTANT DEFINITIONS
*/


#define PSP_SUPPORT_STRUCT_DEFINED                   1
#define PSP_HAS_DSP                                  0
#define PSP_HAS_DSP_TASKS                            0
#define PSP_HAS_FPU                                  0
#define PSP_ALWAYS_SAVE_AND_RESTORE_VOLATILE_FP_REGS 0

/*==========================================================================*/
/*
**                   MQX REQUIRED DEFINITIONS
**
** Other MQX kernel and component functions require these definitions to exist.
*/


/*
** Define padding needed to make the STOREBLOCK_STRUCT align properly
** to cache line size (see mem_prv.h)
*/
#define PSP_MEM_STOREBLOCK_ALIGNMENT   (2) /* padding in _mqx_uints */


/* CTXCR register is not supported by MPC5554. CS field is read as zero */
#define PSP_IVORx_MASK                 (0xFF8)

#define PSP_MSR_CE 	   (1<<(63-46)) /* Critical interrupt enable */
#define PSP_MSR_WE 	   (1<<(63-45)) /* Wait state enable */
#define PSP_MSR_SPE        (1<<(63-38)) /* SPE APU execuition enable */

/* overwrite PSP_MSR_EE in powerpc.h */
#ifdef PSP_MSR_EE
#undef PSP_MSR_EE  
#define PSP_MSR_EE         (1<<(63-48)) /* Exernal interrupt enable */
#endif

/* Some extra cache defines */
#define PSP_DCACHE_NUM_LINES       (128)
#define PSP_DCACHE_NUM_WAYS        (4)
#ifdef PSP_DCACHE_SIZE
#undef PSP_DCACHE_SIZE
#define PSP_DCACHE_SIZE            (PSP_DCACHE_NUM_LINES*PSP_CACHE_LINE_SIZE*PSP_DCACHE_NUM_WAYS) /* 16Kbyte */
#endif

#define PSP_ICACHE_NUM_LINES       (128)
#define PSP_ICACHE_NUM_WAYS        (4)
#ifdef PSP_ICACHE_SIZE
#undef PSP_ICACHE_SIZE
#define PSP_ICACHE_SIZE            (PSP_ICACHE_NUM_LINES*PSP_CACHE_LINE_SIZE*PSP_DCACHE_NUM_WAYS) /* 16Kbyte */
#endif

#undef  PSP_MEMORY_ACCESSING_CAPABILITY
#define PSP_MEMORY_ACCESSING_CAPABILITY (32)

/* Do you want to verify kernel data can be read and written correctly */
#define PSP_KERNEL_DATA_VERIFY_ENABLE   \
        ((uint_32)__KERNEL_DATA_VERIFY_ENABLE)


/*==========================================================================*/
/*
**                    ISR VECTOR TABLE
*/

/*
** Interrupt controller sources
**
** The Interrupt controller has two types of interrupt requests: peripheral and 
** software settable. Both interrupts are external input interrupt to 
** e200z6 core (IVOR4). 
**
** Software settable interrupts 0-7 are assigned vectors 0-7, respectively.
** The peripheral interrupt requests are assigned vectors 8 to 300 to cover
** all of the peripheral interrupt requests.
**
** All external interrupts are demuxed by an external ISR to generate
** individual ISR for each local interrupt source.
**
** Following is vector table for interrupt controller in software vector mode.
*/

#define MPXN20_INTC_VECTOR_BASE  (PSP_EXCPT_SPE_FP_ROUND + 1)
#define QINTC_BASE_VECTOR          MPXN20_INTC_VECTOR_BASE

#define _PSP_VECTOR_TO_IRQ(v) ((v)-QINTC_BASE_VECTOR)
#define _PSP_IRQ_TO_VECTOR(i) ((i)+QINTC_BASE_VECTOR)

#ifndef __ASM__

typedef enum 
{
/* Software settable interrupts */
   MPXN20_INTC_SOFTWARE_INTR_0_VECTOR = MPXN20_INTC_VECTOR_BASE,
   MPXN20_INTC_SOFTWARE_INTR_1_VECTOR,
   MPXN20_INTC_SOFTWARE_INTR_2_VECTOR,
   MPXN20_INTC_SOFTWARE_INTR_3_VECTOR,
   MPXN20_INTC_SOFTWARE_INTR_4_VECTOR,
   MPXN20_INTC_SOFTWARE_INTR_5_VECTOR,
   MPXN20_INTC_SOFTWARE_INTR_6_VECTOR,
   MPXN20_INTC_SOFTWARE_INTR_7_VECTOR,

    /* Watchdog */
   MPXN20_INTC_SWT_TIMEOUT_VECTOR,
   
   /* ECC Error ECC */
   MPXN20_INTC_ECC_ERROR_VECTOR,

/* Peripheral interrupts */

   /* DMA */
   MPXN20_INTC_EDMA_ERROR_1_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_0_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_1_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_2_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_3_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_4_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_5_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_6_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_7_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_8_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_9_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_10_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_11_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_12_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_13_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_14_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_15_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_16_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_17_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_18_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_19_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_20_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_21_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_22_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_23_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_24_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_25_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_26_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_27_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_28_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_29_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_30_VECTOR,
   MPXN20_INTC_EDMA_CHANNEL_31_VECTOR,

      /* Semaphore */
   MPXN20_INTC_SEMAPHORE_INTR_0_VECTOR,
   MPXN20_INTC_SEMAPHORE_INTR_1_VECTOR,
   
        /* CRP */
   MPXN20_INTC_CRP_PIN_WAKEUP_INTR_VECTOR,
   MPXN20_INTC_CRP_API_RTC_INTR_VECTOR,
   MPXN20_INTC_CRP_LVI_INTR_VECTOR,
   
        /* I2C A,B */
   MPXN20_INTC_I2C_A_VECTOR,
   MPXN20_INTC_I2C_B_VECTOR,
   
        /* PLL */
   MPXN20_INTC_PLL_LOSS_OF_CLOCK_VECTOR,
   MPXN20_INTC_PLL_LOSS_OF_LOCK_VECTOR,
   
        /* SIUL */
   MPXN20_INTC_SIU_OVERRUN_VECTOR,
   MPXN20_INTC_SIU_EXT_INTR_0_VECTOR,
   MPXN20_INTC_SIU_EXT_INTR_1_VECTOR,
   MPXN20_INTC_SIU_EXT_INTR_2_VECTOR,
   MPXN20_INTC_SIU_EXT_INTR_3_VECTOR,
   MPXN20_INTC_SIU_EXT_INTR_15_4_VECTOR,
   
        /* EMIOS 0-23 */
   MPXN20_INTC_EMIOS_CHANNEL_0_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_1_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_2_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_3_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_4_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_5_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_6_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_7_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_8_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_9_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_10_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_11_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_12_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_13_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_14_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_15_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_16_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_17_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_18_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_19_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_20_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_21_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_22_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_23_VECTOR,

        /* ADC */
   MPXN20_INTC_ADC0_EOC_VECTOR,
   MPXN20_INTC_ADC0_ERR_VECTOR,
   MPXN20_INTC_ADC0_WD_VECTOR,
   
   	   /* Reserved ADC_B */
   MPXN20_INTC_ADC_B_RESERVED_0,
   MPXN20_INTC_ADC_B_RESERVED_1,
   MPXN20_INTC_ADC_B_RESERVED_2,
   
   	   /* Reserved ADC_C */
   MPXN20_INTC_ADC_C_RESERVED_0,
   MPXN20_INTC_ADC_C_RESERVED_1,
   MPXN20_INTC_ADC_C_RESERVED_2,
   
   	   /* Reserved */
   MPXN20_INTC_NOTUSED_91_VECTOR,   
   MPXN20_INTC_CRP_FLASH_READY_VECTOR,
   MPXN20_INTC_CTU_TRIGGER_VECTOR,
   MPXN20_INTC_NOTUSED_94_VECTOR,   
   
        /* MLB_DIM */
   MPXN20_INTC_MLB_DIM_CHANNEL_INTR_0_15_COMBINED_VECTOR,
   MPXN20_INTC_MLB_DIM_SYSTEM_INTR_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_0_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_1_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_2_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_3_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_4_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_5_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_6_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_7_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_8_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_9_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_10_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_11_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_12_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_13_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_14_VECTOR,
   MPXN20_INTC_MLB_DIM_CHANNEL_15_VECTOR,
   
        /* SCI A-D */
   MPXN20_INTC_SCI_A_VECTOR,
   MPXN20_INTC_SCI_B_VECTOR,
   MPXN20_INTC_SCI_C_VECTOR,
   MPXN20_INTC_SCI_D_VECTOR,

	/* DSPI_A */
   MPXN20_INTC_DSPI_A_FIFO_OVERFLOW_UNDERFLOW_VECTOR,
   MPXN20_INTC_DSPI_A_END_OF_QUEUE_VECTOR,
   MPXN20_INTC_DSPI_A_TX_FIFO_FILL_REQ_VECTOR,
   MPXN20_INTC_DSPI_A_FIFO_TRANSFER_COMPL_VECTOR,
   MPXN20_INTC_DSPI_A_RX_FIFO_DRAIN_REQ_VECTOR,

	/* DSPI_B */
   MPXN20_INTC_DSPI_B_FIFO_OVERFLOW_UNDERFLOW_VECTOR,
   MPXN20_INTC_DSPI_B_END_OF_QUEUE_VECTOR,
   MPXN20_INTC_DSPI_B_FIFO_TRANSFER_COMPL_VECTOR,
   MPXN20_INTC_DSPI_B_RX_FIFO_DRAIN_REQ_VECTOR,
   MPXN20_INTC_DSPI_B_TX_FIFO_FILL_REQ_VECTOR,	
	
   
      /* Flexcan A */
   MPXN20_INTC_FLEXCAN_A_BUS_OFF_WARN_VECTOR,
   MPXN20_INTC_FLEXCAN_A_ERROR_VECTOR,
   MPXN20_INTC_FLEXCAN_A_WAKE_UP_RESERVED_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_0_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_1_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_2_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_3_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_4_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_5_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_6_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_7_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_8_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_9_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_10_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_11VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_12_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_13_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_14_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_15_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_16_31_VECTOR,
   MPXN20_INTC_FLEXCAN_A_BUF_32_63_VECTOR,

   MPXN20_INTC_NOTUSED_148_VECTOR,

   /* Periodic interrupt timer */
   MPXN20_INTC_PIT_1_VECTOR,
   MPXN20_INTC_PIT_2_VECTOR,
   MPXN20_INTC_PIT_3_VECTOR,
   MPXN20_INTC_PIT_4_VECTOR,
   MPXN20_INTC_PIT_5_VECTOR,
   MPXN20_INTC_PIT_6_VECTOR,
   MPXN20_INTC_PIT_7_VECTOR,
   MPXN20_INTC_PIT_8_VECTOR,
   
      /* Flexcan B */
   MPXN20_INTC_FLEXCAN_B_BUS_OFF_WARN_VECTOR,
   MPXN20_INTC_FLEXCAN_B_ERROR_VECTOR,
   MPXN20_INTC_FLEXCAN_B_WAKE_UP_RESERVED_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_0_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_1_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_2_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_3_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_4_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_5_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_6_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_7_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_8_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_9_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_10_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_11VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_12_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_13_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_14_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_15_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_16_31_VECTOR,
   MPXN20_INTC_FLEXCAN_B_BUF_32_63_VECTOR,

     /* Flexcan C */
   MPXN20_INTC_FLEXCAN_C_BUS_OFF_WARN_VECTOR,
   MPXN20_INTC_FLEXCAN_C_ERROR_VECTOR,
   MPXN20_INTC_FLEXCAN_C_WAKE_UP_RESERVED_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_0_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_1_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_2_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_3_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_4_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_5_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_6_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_7_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_8_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_9_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_10_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_11VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_12_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_13_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_14_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_15_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_16_31_VECTOR,
   MPXN20_INTC_FLEXCAN_C_BUF_32_63_VECTOR,

      /* Flexcan D */
   MPXN20_INTC_FLEXCAN_D_BUS_OFF_WARN_VECTOR,
   MPXN20_INTC_FLEXCAN_D_ERROR_VECTOR,
   MPXN20_INTC_FLEXCAN_D_WAKE_UP_RESERVED_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_0_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_1_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_2_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_3_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_4_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_5_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_6_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_7_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_8_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_9_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_10_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_11VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_12_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_13_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_14_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_15_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_16_31_VECTOR,
   MPXN20_INTC_FLEXCAN_D_BUF_32_63_VECTOR,

      /* Flexcan E */
   MPXN20_INTC_FLEXCAN_E_BUS_OFF_WARN_VECTOR,
   MPXN20_INTC_FLEXCAN_E_ERROR_VECTOR,
   MPXN20_INTC_FLEXCAN_E_WAKE_UP_RESERVED_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_0_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_1_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_2_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_3_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_4_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_5_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_6_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_7_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_8_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_9_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_10_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_11VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_12_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_13_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_14_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_15_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_16_31_VECTOR,
   MPXN20_INTC_FLEXCAN_E_BUF_32_63_VECTOR,

      /* Flexcan F */
   MPXN20_INTC_FLEXCAN_F_BUS_OFF_WARN_VECTOR,
   MPXN20_INTC_FLEXCAN_F_ERROR_VECTOR,
   MPXN20_INTC_FLEXCAN_F_WAKE_UP_RESERVED_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_0_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_1_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_2_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_3_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_4_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_5_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_6_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_7_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_8_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_9_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_10_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_11VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_12_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_13_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_14_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_15_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_16_31_VECTOR,
   MPXN20_INTC_FLEXCAN_F_BUF_32_63_VECTOR,

        /* EMIOS 24-31 */
   MPXN20_INTC_EMIOS_CHANNEL_24_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_25_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_26_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_27_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_28_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_29_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_30_VECTOR,
   MPXN20_INTC_EMIOS_CHANNEL_31_VECTOR,
   
           /* SCI E-H */
   MPXN20_INTC_SCI_E_VECTOR,
   MPXN20_INTC_SCI_F_VECTOR,
   MPXN20_INTC_SCI_G_VECTOR,
   MPXN20_INTC_SCI_H_VECTOR,

           /* DSPI_C */
   MPXN20_INTC_DSPI_C_FIFO_OVERFLOW_UNDERFLOW_VECTOR,
   MPXN20_INTC_DSPI_C_END_OF_QUEUE_VECTOR,
   MPXN20_INTC_DSPI_C_FIFO_TRANSFER_COMPL_VECTOR,
   MPXN20_INTC_DSPI_C_RX_FIFO_DRAIN_REQ_VECTOR,
   MPXN20_INTC_DSPI_C_TX_FIFO_FILL_REQ_VECTOR,
     
   
            /* DSPI_D */
   MPXN20_INTC_DSPI_D_FIFO_OVERFLOW_UNDERFLOW_VECTOR,
   MPXN20_INTC_DSPI_D_END_OF_QUEUE_VECTOR,
   MPXN20_INTC_DSPI_D_FIFO_TRANSFER_COMPL_VECTOR,
   MPXN20_INTC_DSPI_D_RX_FIFO_DRAIN_REQ_VECTOR,
   MPXN20_INTC_DSPI_D_TX_FIFO_FILL_REQ_VECTOR,
   
            /* FlexRay */
   MPXN20_INTC_FLEXRAY_MIF_VECTOR,
   MPXN20_INTC_FLEXRAY_PRIF_VECTOR,
   MPXN20_INTC_FLEXRAY_CHIF_VECTOR,
   MPXN20_INTC_FLEXRAY_WUP_IF_VECTOR,
   MPXN20_INTC_FLEXRAY_FBNE_F_VECTOR,
   MPXN20_INTC_FLEXRAY_FANE_F_VECTOR,
   MPXN20_INTC_FLEXRAY_RBIF_VECTOR,
   MPXN20_INTC_FLEXRAY_TBIF_VECTOR,
   
   	   	   /* Soft MediaLB */
   MPXN20_INTC_NOTUSED_292_VECTOR,
   MPXN20_INTC_NOTUSED_293_VECTOR,
 
            /* System timer */
   MPXN20_INTC_STM_MACTH_CHANNEL_0_VECTOR,
   MPXN20_INTC_STM_MACTH_CHANNEL_1_VECTOR,
   MPXN20_INTC_STM_MACTH_CHANNEL_2_VECTOR,
   MPXN20_INTC_STM_MACTH_CHANNEL_3_VECTOR,

            /* FEC */
   MPXN20_INTC_FEC_TX_VECTOR,
   MPXN20_INTC_FEC_RX_VECTOR,
   MPXN20_INTC_FEC_EVERYTHING_ELSE_VECTOR,
   
   /* Reserved for On Platform */
   MPXN20_INTC_NOTUSED_301_VECTOR,
   MPXN20_INTC_NOTUSED_302_VECTOR,
   MPXN20_INTC_NOTUSED_303_VECTOR,
   MPXN20_INTC_NOTUSED_304_VECTOR,
   MPXN20_INTC_NOTUSED_305_VECTOR,
   
   /* SCI J-M */
   MPXN20_INTC_SCI_J_VECTOR,
   MPXN20_INTC_SCI_K_VECTOR,
   MPXN20_INTC_SCI_L_VECTOR,
   MPXN20_INTC_SCI_M_VECTOR,

   /* Reserved for SCI N-R */
   MPXN20_INTC_NOTUSED_310_VECTOR,
   MPXN20_INTC_NOTUSED_311_VECTOR,
   MPXN20_INTC_NOTUSED_312_VECTOR,
   MPXN20_INTC_NOTUSED_313_VECTOR,
   
   /* I2C C,D */
   MPXN20_INTC_I2C_C_VECTOR,
   MPXN20_INTC_I2C_D_VECTOR
} MPXN20_INTERRUPT_VECTOR_TABLE;


// Each PSP defines its own interrupt type. makes it hard to share drivers...
typedef MPXN20_INTERRUPT_VECTOR_TABLE PSP_INTERRUPT_TABLE_INDEX;
typedef MPXN20_INTERRUPT_VECTOR_TABLE IRQInterruptIndex;


#endif /* __ASM__ */

#define QINTC_FIRST_VECTOR      MPXN20_INTC_VECTOR_BASE
#define QINTC_LAST_VECTOR       MPXN20_INTC_I2C_D_VECTOR

/* The maximum number of hardware interrupt vectors */
#ifdef PSP_MAXIMUM_INTERRUPT_VECTORS
#undef PSP_MAXIMUM_INTERRUPT_VECTORS
#endif
#define PSP_MAXIMUM_INTERRUPT_VECTORS  (16)
#define PSP_SKIP_INT_INSTALL_FOR_VECTORS	case PSP_EXCPT_MACHINE_CHECK:


/*==========================================================================*/
// Memory mapped peripherals
#define MPXN20_SRAM_BASE                     (0x40000000)
#define MPXN20_SRAM_CORE_0_BASE              (0x40000000)
#define MPXN20_SRAM_CORE_1_BASE              (0x40080000)


// Peripherals AIPS_A 
#define MPXN20_MLB_DIM_BASE                  (0xC3F84000)
#define MPXN20_I2C_C_BASE                    (0xC3F88000)
#define MPXN20_I2C_D_BASE                    (0xC3F8C000)

#define MPXN20_DSPI_C_BASE                   (0xC3F90000)
#define MPXN20_DSPI_D_BASE                   (0xC3F94000)

#define MPXN20_ESCI_J_BASE                   (0xC3FA0000)
#define MPXN20_ESCI_K_BASE                   (0xC3FA4000)
#define MPXN20_ESCI_L_BASE                   (0xC3FA8000)
#define MPXN20_ESCI_M_BASE                   (0xC3FAC000)

#define MPXN20_FLEXRAY_BASE                  (0xC3FDC000)

// Peripherals AIPS_B (AXBS Port S7)
#define MPXN20_AXBS_BASE                     (0xFFF04000)
#define MPXN20_SEMAPHORE_BASE                (0xFFF10000)
#define MPXN20_MPU_BASE                      (0xFFF14000)
#define MPXN20_SWT_BASE                      (0xFFF38000)
#define MPXN20_STM_BASE                      (0xFFF3C000)
#define MPXN20_ECSM_BASE                     (0xFFF40000)
#define MPXN20_EDMA_BASE                     (0xFFF44000)
#define MPXN20_INTC_BASE                     (0xFFF48000)
#define MPXN20_FEC_BASE                      (0xFFF4C000)
#define MPXN20_ADC_A_BASE                    (0xFFF80000)
#define MPXN20_I2C_A_BASE                    (0xFFF88000)
#define MPXN20_I2C_B_BASE                    (0xFFF8C000)
#define MPXN20_DSPI_A_BASE                   (0xFFF90000)
#define MPXN20_DSPI_B_BASE                   (0xFFF94000)
#define MPXN20_ESCI_A_BASE                   (0xFFFA0000)
#define MPXN20_ESCI_B_BASE                   (0xFFFA4000)
#define MPXN20_ESCI_C_BASE                   (0xFFFA8000)
#define MPXN20_ESCI_D_BASE                   (0xFFFAC000)
#define MPXN20_ESCI_E_BASE                   (0xFFFB0000)
#define MPXN20_ESCI_F_BASE                   (0xFFFB4000)
#define MPXN20_ESCI_G_BASE                   (0xFFFB8000)
#define MPXN20_ESCI_H_BASE                   (0xFFFBC000)

#define MPXN20_FLEXCAN_A_BASE                (0xFFFC0000)
#define MPXN20_FLEXCAN_B_BASE                (0xFFFC4000)
#define MPXN20_FLEXCAN_C_BASE                (0xFFFC8000)
#define MPXN20_FLEXCAN_D_BASE                (0xFFFCC000)
#define MPXN20_FLEXCAN_E_BASE                (0xFFFD0000)
#define MPXN20_FLEXCAN_F_BASE                (0xFFFD4000)

#define MPXN20_CTU_A_BASE                    (0xFFFD8000)
#define MPXN20_DMA_MUX_BASE                  (0xFFFDC000)
#define MPXN20_PIT_BASE                      (0xFFFE0000)
#define MPXN20_EMIOS_A_BASE                  (0xFFFE4000)
#define MPXN20_SIU_BASE                      (0xFFFE8000)
#define MPXN20_CRP_BASE                      (0xFFFEC000)
#define MPXN20_RTC_BASE                      (0xFFFEC00C)
#define MPXN20_PLL_BASE                      (0xFFFF0000)
#define MPXN20_PF_CONFIG_BASE                (0xFFFF8000)
#define MPXN20_BAM_BASE                      (0xFFFFC000)

/*  Current version does not support multi core, 
 ** therefore this definition for Semaphore device is just simply ingored
 */
#define SEMA4_NUM_DEVICES                    1
#define MPXNXX_ADC_NUM_DEVICES               1


/*----------------------------------------------------------------------------*/

/* MMU and Cache */

/* MPXN20 MMU page sizes.
** Note MPXN20 allows 1K and 2K page sizes, but these sizes have restrictions on placement
** Also, MPXN20 allows 4G pages size, but we can't use it, so we don't allow it */
#define E200CORE_MMU_MIN_PAGE_SIZE  (4*1024)
#define E200CORE_MMU_MAX_PAGE_SIZE  (2*1024*1024)

#define _mpxn20_mmu_init       _mmu_init
#define _mpxn20_mmu_disable    _mmu_disable
#define _mpxn20_mmu_enable     _mmu_enable
#define _mpxn20_mmu_add_region _mmu_add_region
#define _mpxn20_mmu_add_regions(x) _mmu_add_region(x,0,0)


#endif
